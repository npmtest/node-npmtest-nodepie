{"/home/travis/build/npmtest/node-npmtest-nodepie/test.js":"/* istanbul instrument in package npmtest_nodepie */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodepie/lib.npmtest_nodepie.js":"/* istanbul instrument in package npmtest_nodepie */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nodepie = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nodepie = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nodepie/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nodepie && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nodepie */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nodepie\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nodepie.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nodepie.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nodepie.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nodepie.__dirname + '/lib.npmtest_nodepie.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodepie/node_modules/nodepie/lib/nodepie.js":"'use strict';\n\nvar xmlparser = require('xml2json');\nvar encoding = require('encoding');\nvar urllib = require('url');\nvar he = require('he');\n\nmodule.exports = NodePie;\n\n/************* FEED *************/\n\n/**\n * <p>Generates a NodePie object for parsing RSS/Atom feed data</p>\n *\n * <p>Usage:</p>\n *\n * <pre>\n * var np = new NodePie(feed);\n * np.init();\n * console.log(np.getTitle());\n *\n * np.getItems().forEach(function(item){\n *     console.log(item.getTitle());\n * });\n * </pre>\n *\n * @constructor\n * @param {String|Buffer} [xml] Feed XML data\n * @param {Object} [options] options object\n */\nfunction NodePie(xml, options) {\n\n    this.encoding = 'UTF-8';\n    this.options = options || {};\n    this.xml = xml || '';\n\n    this.feed = undefined;\n    this.rootElement = undefined;\n    this.channelElement = undefined;\n    this.itemsElement = undefined;\n    this.feedType = undefined;\n    this.namespaces = {};\n\n    this._items = {};\n    this._item_count = false;\n}\n\n/************* FEED CONSTRUCTOR PROPERTIES/METHODS *************/\n\n/**\n * NodePie.NS -> Object\n *\n * Holds a list of known XML namespaces for parsing certain objects,\n * for example the WFW namespace declares a wfw:commentRSS element which\n * includes comments feed for the post\n **/\nNodePie.NS = {\n    WFW: 'http://wellformedweb.org/CommentAPI/',\n    DC: 'http://purl.org/dc/elements/1.1/',\n    CONTENT: 'http://purl.org/rss/1.0/modules/content/',\n    ATOM10: 'http://www.w3.org/2005/Atom',\n    GD: 'http://schemas.google.com/g/2005'\n};\n\n/**\n * NodePie._walkForNS(node, that[, depth]) -> undefined\n * - node (Object): object to check for\n * - that (Object): current context\n * - depth Number): How deep are we\n *\n * Walks all the feed object nodes to populate XML namespace object\n * NodePie#namespaces\n **/\nNodePie._walkForNS = function(node, that, depth) {\n    depth = depth || 0;\n\n    var keys = Object.keys(node);\n    var key;\n\n    if (depth > 7) {\n        return;\n    }\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        if (typeof node[key] === 'string') {\n            if (key.trim().substr(0, 6).toLowerCase() === 'xmlns:') {\n                that.namespaces[node[key]] = key.trim().substr(6);\n            }\n        } else if (node[key] && typeof node[key] === 'object') {\n            NodePie._walkForNS(node[key], that, depth + 1);\n        }\n    }\n};\n\n/************* FEED LEVEL PRIVATE METHODS *************/\n\n/**\n * NodePie#_fetchNamespaces() -> undefined\n *\n * Populates NodePie#namespaces object with used namespaces\n **/\nNodePie.prototype._fetchNamespaces = function() {\n    if (this.rootElement) {\n        NodePie._walkForNS(this.rootElement, this);\n    }\n};\n\n/**\n * NodePie#_checkEncoding(xml) -> undefined\n * - xml (Buffer): XML to convert encoding if it is not in UTF-8\n *\n * Checks if the XML is not UTF-8 and encodes it accordingly\n **/\nNodePie.prototype._checkEncoding = function(xml) {\n\n    //<?xml version='1.0' encoding='UTF-8'>\n    if (!this.options.encoding) {\n        xml.slice(0, xml.length < 255 ? xml.length : 255).toString('utf-8').replace(/<\\?xml[^>]*>/i, (function(tag) {\n            var m = tag.match(/encoding\\s*=\\s*[\"']([^\"']+)[\"']/i);\n            this.encoding = (m && m[1] || this.encoding).trim().toUpperCase();\n        }).bind(this));\n    } else {\n        this.encoding = this.options.encoding.trim().toUpperCase();\n    }\n\n    if (['UTF-8', 'UTF8'].indexOf(this.encoding) < 0) {\n        xml = encoding.convert(xml, 'UTF-8', this.encoding);\n    }\n\n    return xml.toString('utf-8').trim();\n};\n\n/**\n * NodePie#_checkType() -> undefined\n *\n * Detects the format of the feed (RSS, Atom or RDF), finds root elements,\n * entry arrays etc.\n **/\nNodePie.prototype._checkType = function() {\n    var root_keys = Object.keys(this.feed);\n    var key;\n    var type;\n    var elem;\n\n    for (var i = 0, len = root_keys.length; i < len; i++) {\n\n        key = root_keys[i];\n        elem = this.feed[key];\n\n        if (typeof elem !== 'object' || Array.isArray(elem)) {\n            continue;\n        }\n\n        type = key.trim().toLowerCase();\n\n        if (type === 'feed') {\n            this.feedType = 'atom';\n            this.rootElement = elem;\n            this.channelElement = elem || {};\n            this.itemsElement = elem.entry || [];\n            break;\n        } else if (type === 'rss') {\n            this.feedType = 'rss';\n            this.rootElement = elem;\n            this.channelElement = elem.channel || {};\n            this.itemsElement = this.channelElement.item || [];\n            break;\n        } else if (type === 'rdf' || type.substr(-4) === ':rdf') {\n            this.feedType = 'rdf';\n            this.rootElement = elem;\n            this.channelElement = elem.channel || {};\n            this.itemsElement = elem.item || [];\n            break;\n        } else if (type === 'backslash') {\n            this.feedType = 'backslash';\n            this.rootElement = elem;\n            this.channelElement = elem;\n            this.itemsElement = this.channelElement.story || [];\n            break;\n        }\n    }\n\n    if (!this.rootElement) {\n        throw new Error('Invalid feed!');\n    }\n};\n\n/**\n * NodePie#_formatStr(str) -> String\n * - str (String): string to format\n *\n * Formats a string according to initial options. By default decodes any HTML\n * entities\n **/\nNodePie.prototype._formatStr = function(str) {\n    if (this.options.keepHTMLEntities) {\n        return str;\n    } else {\n        return he.decode(str);\n    }\n};\n\n/**\n * NodePie#_parseContents(str) -> String\n * - str (String | Object): string or object to fetch text from\n *\n * Fetches text contents from a string or feed text object\n **/\nNodePie.prototype._parseContents = function(str) {\n    if (typeof str === 'object') {\n        str = str.$t;\n    }\n    \n     if (typeof str === 'number') {\n        str = str.toString();\n    }\n\n    if (typeof str === 'string') {\n        str = str.trim();\n        if (str !== '') {\n            return this._formatStr(str);\n        }\n    }\n\n    return false;\n};\n\n/**\n * NodePie#_processDate(str) -> Date || false\n * - str (String): string containing the date\n *\n * Processes a date\n **/\nNodePie.prototype._processDate = function(date) {\n    if (!date) {\n        return false;\n    }\n\n    date = new Date(date);\n\n    var stamp = date.getTime();\n\n    if (!stamp) {\n        return false;\n    }\n\n    if (stamp > Date.now()) {\n        return new Date();\n    }\n\n    return date;\n};\n\n/************* FEED LEVEL PUBLIC METHODS *************/\n\n/**\n * NodePie#init() -> undefined\n *\n * Parses XML and fetches any used namespaces from the object\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n **/\nNodePie.prototype.init = function() {\n\n    if (this.xml instanceof Buffer) {\n        this.xml = this._checkEncoding(this.xml);\n    } else {\n        this.xml = (this.xml || '').toString('utf-8').trim();\n    }\n\n    this.feed = xmlparser.toJson(this.xml, {\n        object: true,\n        sanitize: false,\n        trim: false\n    });\n\n    this._checkType();\n    this._fetchNamespaces();\n};\n\n/**\n * NodePie#getTitle() -> String | False\n *\n * Fetches the title of the feed\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n *     title = np.getTitle();\n **/\nNodePie.prototype.getTitle = function() {\n    return this._parseContents(this.channelElement.title);\n};\n\n/**\n * NodePie#getEncoding() -> String\n *\n * Returns the encoding for the source feed\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n *     source_encoding = np.getEncoding();\n **/\nNodePie.prototype.getEncoding = function() {\n    return this.encoding;\n};\n\n/**\n * NodePie#getDescription() -> String | False\n *\n * Fetches the description of the feed\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n *     description = np.getDescription();\n **/\nNodePie.prototype.getDescription = function() {\n    return this._parseContents(\n        this.channelElement.description || this.channelElement.subtitle ||\n        this.channelElement.tagline\n    );\n};\n\n/**\n * NodePie#getPermalink() -> String | False\n *\n * Fetches the URL of the blog\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n *     blog_url = np.getPermalink();\n **/\nNodePie.prototype.getPermalink = function() {\n    var link = this.channelElement.link;\n\n    if (typeof link === 'string') {\n        return link.trim();\n    } else {\n        return this.getLink();\n    }\n};\n\n/**\n * NodePie#getHub() -> String | False\n *\n * Fetches the PubSubHubbub URL of the blog\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n *     pubsubhub = np.getHub();\n **/\nNodePie.prototype.getHub = function() {\n    return this.getLink('hub');\n};\n\n/**\n * NodePie#getSelf() -> String | False\n *\n * Fetches the rss/atom url of the current feed (useful when the feed is received from pubsubhubbub)\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n *     rss_url = np.getSelf();\n **/\nNodePie.prototype.getSelf = function() {\n    return this.getLink(NodePie.NS.GD + '#feed', 'application/atom+xml') ||\n        this.getLink('self', 'application/rss+xml');\n};\n\n/**\n * NodePie#getImage() -> String | False\n *\n * Fetches the logo url of the feed\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n *     logo = np.getImage();\n **/\nNodePie.prototype.getImage = function() {\n    var gdns = this.namespaces[NodePie.NS.GD];\n\n    return this._parseContents(\n        (this.channelElement.image && this.channelElement.image.url) ||\n        (this.channelElement.author && this.channelElement.author[gdns + ':image'] &&\n            this.channelElement.author[gdns + ':image'].src) ||\n        this.channelElement.logo ||\n        this.channelElement.icon\n    );\n};\n\n/**\n * NodePie#getLink([rel='alternate'[, type='text/html']]) -> String | False\n * - rel (String): link rel\n * - type (String): link content type\n *\n * Fetches a specified link from the links object\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n *     edit_link = np.getLink('edit','application/atom+xml');\n **/\nNodePie.prototype.getLink = function(rel, type) {\n    rel = rel || 'alternate';\n    type = type || 'text/html';\n\n    var atom10ns = this.namespaces[NodePie.NS.ATOM10];\n    var link = (atom10ns && [].concat(this.channelElement[atom10ns + ':link'] || []).concat(this.channelElement.link)) || this.channelElement.link;\n\n    if (link) {\n        if (typeof link === 'string') {\n            if (rel === 'alternate' && type === 'text/html') {\n                return link.trim();\n            }\n        } else if (Array.isArray(link)) {\n            for (var i = 0, len = link.length; i < len; i++) {\n                if (rel === link[i].rel && (!link[i].type || type === link[i].type)) {\n                    return link[i].href;\n                }\n            }\n        } else if (typeof link === 'object') {\n            if (rel === link.rel && (!link.type || type === link.type)) {\n                return link.href;\n            }\n        }\n    }\n\n    if (rel == 'alternate' && type == 'text/html' && link && link.href && !link.rel && !link.type) {\n        return link.href;\n    }\n\n    return false;\n};\n\n/**\n * NodePie#getDate() -> Date | False\n *\n * Fetches the publish date of the feed as a Date object\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n *     date = np.getDate();\n *     console.log(date.getFullYear))\n **/\nNodePie.prototype.getDate = function() {\n    var dcns = this.namespaces[NodePie.NS.DC];\n\n    return this._processDate(\n        this.channelElement.lastBuildDate || this.channelElement.updated ||\n        (dcns && this.channelElement[dcns + ':date'])\n    ) || this.getItems().map(function(item) {\n        return item.getDate();\n    }).reduce(function(previousValue, currentValue) {\n        return (previousValue && previousValue.getTime() || 0) < (currentValue && currentValue.getTime() || 0) ? currentValue : previousValue;\n    }, 0) || false;\n};\n\n/**\n * NodePie#getItemQuantity([max]) -> Number\n *\n * Fetches the count of the items in the feed or max\n *\n * Usage:\n *\n *     var np = new NodePie(feed);\n *     np.init();\n *     item_count = np.getItemQuantity();\n **/\nNodePie.prototype.getItemQuantity = function(max) {\n    max = max || 0;\n\n    if (this._item_count !== false) {\n        return max && max < this._item_count ? max : this._item_count;\n    }\n\n    this._item_count = 0;\n\n    if (this.itemsElement) {\n        if (Array.isArray(this.itemsElement)) {\n            this._item_count = this.itemsElement.length;\n        } else if (typeof this.itemsElement === 'object') {\n            this._item_count = 1;\n        }\n    }\n\n    return max && max < this._item_count ? max : this._item_count;\n};\n\n/**\n * NodePie#getItems([start[, length]) -> Array\n * - start (Number): start index\n * - length (Number): how many items to fetch\n *\n * Fetches an array of NodePie.Item objects\n **/\nNodePie.prototype.getItems = function(start, length) {\n    start = start || 0;\n\n    var quantity = this.getItemQuantity();\n    var items = [];\n\n    length = length || quantity;\n\n    if (start >= quantity) {\n        start = quantity - 1;\n        if (start === -1) {\n            start = 0;\n        }\n    }\n\n    if (length > quantity - start) {\n        length = quantity - start;\n    }\n\n    for (var i = start; i < length; i++) {\n        items.push(this.getItem(i));\n    }\n    return items;\n};\n\n/**\n * NodePie#getItem(i) -> NodePie.Item | False\n * - i (Number): item index\n *\n * Fetches a NodePie.Item object from defined index or false if out of bounds\n **/\nNodePie.prototype.getItem = function(i) {\n    i = i && !isNaN(i) && parseInt(Math.abs(i), 10) || 0;\n\n    if (this._items[i]) {\n        return this._items[i];\n    }\n\n    if (Array.isArray(this.itemsElement)) {\n        if (this.itemsElement.length > i) {\n            this._items[i] = new NodePie.Item(this.itemsElement[i], this);\n            return this._items[i];\n        }\n    } else if (typeof this.itemsElement === 'object') {\n        if (i === 0) {\n            this._items[i] = new NodePie.Item(this.itemsElement, this);\n            return this._items[i];\n        }\n    }\n\n    return false;\n};\n\n\n/************* ITEM *************/\n\n/**\n * new NodePie.Item(element, feed)\n * - element (Object): entry object\n * - feed (Object): NodePie parent object\n *\n * Generates a NodePie.Item object. This is done by NodePie#getItem() method\n * automatically\n **/\nNodePie.Item = function(element, feed) {\n    this.element = element;\n    this.feed = feed;\n};\n\n/************* ITEM LEVEL PRIVATE METHODS *************/\n\n/**\n * NodePie.Item#_parseContents(str) -> String | False\n * - str (String | Object): a string or an object to parse text from\n *\n * Derivated from NodePie#_parseContents\n **/\nNodePie.Item.prototype._parseContents = function(str) {\n    return this.feed._parseContents(str);\n};\n\n/**\n * NodePie.Item#_formatStr(str) -> String | False\n * - str (String): a string to format\n *\n * Derivated from NodePie#_formatStr\n **/\nNodePie.Item.prototype._formatStr = function(str) {\n    return this.feed._formatStr(str);\n};\n\n/**\n * NodePie.Item#_parseAuthor(str) -> String\n * - str (String | Object): author string value\n *\n * Parser the author name from 'e-mail (name)' string\n **/\nNodePie.Item.prototype._parseAuthor = function(author) {\n    // email (name)\n    var name = author.trim().match(/^[\\w.\\-]+@[\\w.\\-]+ \\(([^)]+)\\)$/);\n\n    if (name) {\n        author = (name[1] || '').trim();\n    }\n\n    return this._formatStr(author);\n};\n\n/************* ITEM LEVEL PUBLIC METHODS *************/\n\n/**\n * NodePie.Item#getLink([rel='alternate'[, type='text/html']]) -> String | False\n * - rel (String): link rel\n * - type (String): link content type\n *\n * Fetches a specified link from the links object\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     permalink = item.getLink('alternate','text/html');\n **/\nNodePie.Item.prototype.getLink = function(rel, type) {\n    rel = rel || 'alternate';\n    type = type || 'text/html';\n\n    var link = this.element.link || this.element.url;\n\n    if (!link) {} else if (typeof link === 'string') {\n        if (rel === 'alternate' && type === 'text/html') {\n            return link.trim();\n        }\n    } else if (typeof link === 'object' && !Array.isArray(link)) {\n        if (rel === link.rel && (!link.type || type === link.type)) {\n            return link.href;\n        }\n    } else if (Array.isArray(link)) {\n        for (var i = 0, len = link.length; i < len; i++) {\n            if (rel === link[i].rel && (!link[i].type || type === link[i].type)) {\n                return link[i].href;\n            }\n        }\n    }\n\n    if (rel == 'alternate' && type == 'text/html' && link && link.href && !link.rel && !link.type) {\n        return link.href;\n    }\n\n    return false;\n};\n\n/**\n * NodePie.Item#getPermalink() -> String | False\n *\n * Fetches a permalink to the post\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     permalink = item.getPermalink();\n **/\nNodePie.Item.prototype.getPermalink = function() {\n    var permalink = this.getLink();\n    var feedLink;\n\n    if (!permalink) {\n        return permalink;\n    }\n\n    if ((feedLink = this.feed.getPermalink())) {\n        return urllib.resolve(feedLink, permalink);\n    } else {\n        return permalink;\n    }\n};\n\n/**\n * NodePie.Item#getAuthor() -> String | False\n *\n * Fetches the (first) author of the post\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     author = item.getAuthor();\n **/\nNodePie.Item.prototype.getAuthor = function() {\n    var authors = this.getAuthors();\n\n    return authors && authors[0];\n};\n\n/**\n * NodePie.Item#getAuthors() -> Array\n *\n * Fetches an array of authors of the post\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     authors = item.getAuthors();\n *     console.log(author[0]);\n **/\nNodePie.Item.prototype.getAuthors = function() {\n    var author, authors = [];\n    var dcns = this.feed.namespaces[NodePie.NS.DC];\n\n    if (this.element.author) {\n        author = this.element.author;\n    } else if (this.element.creator) {\n        author = this.element.creator;\n    } else if (dcns && this.element[dcns + ':creator']) {\n        author = this.element[dcns + ':creator'];\n    } else {\n        return false;\n    }\n\n    if (typeof author === 'string') {\n        return [this._parseAuthor(author)];\n    }\n\n    if (typeof author === 'object') {\n        if (Array.isArray(author)) {\n            for (var i = 0, len = author.length; i < len; i++) {\n                if (author[i] && author[i].name) {\n                    authors.push(author[i].name);\n                }\n            }\n            return authors || false;\n        } else if (typeof author.name === 'string') {\n            return [this._parseAuthor(author.name)];\n        }\n    }\n\n    return false;\n};\n\n/**\n * NodePie.Item#getTitle() -> String | False\n *\n * Fetches the title of the post\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     title = item.getTitle();\n **/\nNodePie.Item.prototype.getTitle = function() {\n    return this._parseContents(this.element.title);\n};\n\n/**\n * NodePie.Item#getDate() -> Date | False\n *\n * Fetches the date of the post as a Date object\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     date = item.getDate();\n *     console.log('Created: ' + date.getFullYear());\n **/\nNodePie.Item.prototype.getDate = function() {\n    var dcns = this.feed.namespaces[NodePie.NS.DC];\n\n    return this.feed._processDate(\n        this.element.pubDate || this.element.published || this.element.created || this.element.issued ||\n        this.element.updated || this.element.modified || (dcns && this.element[dcns + ':date']) || this.element.time\n    );\n};\n\n/**\n * NodePie.Item#getUpdateDate() -> Date | False\n *\n * Fetches the update date of the post as a Date object\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     date = item.getUpdateDate();\n *     console.log('Updated: ' + date.getFullYear());\n **/\nNodePie.Item.prototype.getUpdateDate = function() {\n    return this.feed._processDate(\n        this.element.updated || this.element.modified\n    ) || this.getDate(); // fallback to creation date\n};\n\n/**\n * NodePie.Item#getDescription() -> String | False\n *\n * Fetches the description of the post (prefers summaries)\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     description = item.getDescription();\n **/\nNodePie.Item.prototype.getDescription = function() {\n    var cns = this.feed.namespaces[NodePie.NS.CONTENT];\n    var atom10ns = this.feed.namespaces[NodePie.NS.ATOM10];\n    var summary = this.element[atom10ns + ':summary'];\n\n    return this._parseContents(\n        this.element.description || summary ||\n        this.element.content || (cns && this.element[cns + ':encoded']) || ''\n    );\n};\n\n/**\n * NodePie.Item#getContents() -> String | False\n *\n * Fetches the contents of the post (prefers full text)\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     contents = item.getContents();\n **/\nNodePie.Item.prototype.getContents = function() {\n    var cns = this.feed.namespaces[NodePie.NS.CONTENT];\n    var atom10ns = this.feed.namespaces[NodePie.NS.ATOM10];\n    var summary = this.element[atom10ns + ':summary'];\n\n    return this._parseContents(\n        this.element.content || (cns && this.element[cns + ':encoded']) ||\n        this.element.description || summary || ''\n    );\n};\n\n/**\n * NodePie.Item#getCategory() -> String | False\n *\n * Fetches the (first) category of the post\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     category = item.getCategory();\n **/\nNodePie.Item.prototype.getCategory = function() {\n    var categories = this.getCategories();\n\n    return categories && categories[0];\n};\n\n/**\n * NodePie.Item#getCategories() -> Array | False\n *\n * Fetches an array of categories of the post\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     categories = item.getCategories();\n **/\nNodePie.Item.prototype.getCategories = function() {\n    var category, categories = [];\n    var dcns = this.feed.namespaces[NodePie.NS.DC];\n\n    category = this.element.category || this.element[dcns + ':subject'] || this.element.department;\n\n    if (!category) {} else if (typeof category === 'string') {\n        if ((category = category.trim())) {\n            return [this._formatStr(category)];\n        }\n    } else if (Array.isArray(category)) {\n        for (var i = 0, len = category.length; i < len; i++) {\n            if (typeof category[i] === 'string') {\n                if (category[i].trim()) {\n                    categories.push(category[i].trim());\n                }\n            } else if (typeof category[i] === 'object') {\n                if ((category[i].term || category[i].$t || '').toString().trim()) {\n                    categories.push(this._formatStr((category[i].term || category[i].$t || '').toString().trim()));\n                }\n            }\n        }\n        return categories.length && categories;\n    } else if (typeof category === 'object') {\n        category = category.term || category.$t;\n        if (category && (category = (category || '').toString().trim())) {\n            return [this._formatStr(category)];\n        }\n    }\n\n    return false;\n};\n\n/**\n * NodePie.Item#getComments() -> Object | False\n *\n * Fetches an object containing links to the HTML comments page and to an\n * Atom/RSS feed of comments for the post\n *\n *     {\n *         html: 'http://link_to_html_page',\n *         feed: 'http://link_to_comments_feed'\n *     }\n *\n * Usage:\n *\n *     var item = np.getItem(0);\n *     comments = item.getComments();\n *     console.log('See all comments: ' + comments.html);\n **/\nNodePie.Item.prototype.getComments = function() {\n    var wfwns = this.feed.namespaces[NodePie.NS.WFW];\n    var html;\n    var feed;\n\n    if (!(html = this.element.comments)) {\n        html = this.getLink('replies', 'text/html');\n    }\n\n    feed = wfwns && (feed = this.element[wfwns + ':commentRss']);\n\n    if (!feed) {\n        feed = this.getLink('replies', 'application/atom+xml');\n    }\n\n    return (feed || html) ? {\n        feed: feed,\n        html: html\n    } : false;\n};\n"}